// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/openfeature/provider.go

// Package openfeature is a generated GoMock package.
package openfeature

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFeatureProvider is a mock of FeatureProvider interface.
type MockFeatureProvider struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureProviderMockRecorder
}

// MockFeatureProviderMockRecorder is the mock recorder for MockFeatureProvider.
type MockFeatureProviderMockRecorder struct {
	mock *MockFeatureProvider
}

// NewMockFeatureProvider creates a new mock instance.
func NewMockFeatureProvider(ctrl *gomock.Controller) *MockFeatureProvider {
	mock := &MockFeatureProvider{ctrl: ctrl}
	mock.recorder = &MockFeatureProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureProvider) EXPECT() *MockFeatureProviderMockRecorder {
	return m.recorder
}

// BooleanEvaluation mocks base method.
func (m *MockFeatureProvider) BooleanEvaluation(flag string, defaultValue bool, evalCtx EvaluationContext, options ...EvaluationOption) BoolResolutionDetail {
	m.ctrl.T.Helper()
	varargs := []interface{}{flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BooleanEvaluation", varargs...)
	ret0, _ := ret[0].(BoolResolutionDetail)
	return ret0
}

// BooleanEvaluation indicates an expected call of BooleanEvaluation.
func (mr *MockFeatureProviderMockRecorder) BooleanEvaluation(flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BooleanEvaluation", reflect.TypeOf((*MockFeatureProvider)(nil).BooleanEvaluation), varargs...)
}

// NumberEvaluation mocks base method.
func (m *MockFeatureProvider) NumberEvaluation(flag string, defaultValue float64, evalCtx EvaluationContext, options ...EvaluationOption) NumberResolutionDetail {
	m.ctrl.T.Helper()
	varargs := []interface{}{flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NumberEvaluation", varargs...)
	ret0, _ := ret[0].(NumberResolutionDetail)
	return ret0
}

// NumberEvaluation indicates an expected call of NumberEvaluation.
func (mr *MockFeatureProviderMockRecorder) NumberEvaluation(flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberEvaluation", reflect.TypeOf((*MockFeatureProvider)(nil).NumberEvaluation), varargs...)
}

// ObjectEvaluation mocks base method.
func (m *MockFeatureProvider) ObjectEvaluation(flag string, defaultValue interface{}, evalCtx EvaluationContext, options ...EvaluationOption) ResolutionDetail {
	m.ctrl.T.Helper()
	varargs := []interface{}{flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObjectEvaluation", varargs...)
	ret0, _ := ret[0].(ResolutionDetail)
	return ret0
}

// ObjectEvaluation indicates an expected call of ObjectEvaluation.
func (mr *MockFeatureProviderMockRecorder) ObjectEvaluation(flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectEvaluation", reflect.TypeOf((*MockFeatureProvider)(nil).ObjectEvaluation), varargs...)
}

// StringEvaluation mocks base method.
func (m *MockFeatureProvider) StringEvaluation(flag, defaultValue string, evalCtx EvaluationContext, options ...EvaluationOption) StringResolutionDetail {
	m.ctrl.T.Helper()
	varargs := []interface{}{flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StringEvaluation", varargs...)
	ret0, _ := ret[0].(StringResolutionDetail)
	return ret0
}

// StringEvaluation indicates an expected call of StringEvaluation.
func (mr *MockFeatureProviderMockRecorder) StringEvaluation(flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringEvaluation", reflect.TypeOf((*MockFeatureProvider)(nil).StringEvaluation), varargs...)
}

// Metadata mocks base method.
func (m *MockFeatureProvider) Metadata() Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(Metadata)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockFeatureProviderMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockFeatureProvider)(nil).Metadata))
}
