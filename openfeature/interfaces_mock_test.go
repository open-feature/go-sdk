// Code generated by MockGen. DO NOT EDIT.
// Source: openfeature/interfaces.go

// Package openfeature is a generated GoMock package.
package openfeature

import (
	context "context"
	reflect "reflect"

	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
)

// MockIEvaluation is a mock of IEvaluation interface.
type MockIEvaluation struct {
	ctrl     *gomock.Controller
	recorder *MockIEvaluationMockRecorder
}

// MockIEvaluationMockRecorder is the mock recorder for MockIEvaluation.
type MockIEvaluationMockRecorder struct {
	mock *MockIEvaluation
}

// NewMockIEvaluation creates a new mock instance.
func NewMockIEvaluation(ctrl *gomock.Controller) *MockIEvaluation {
	mock := &MockIEvaluation{ctrl: ctrl}
	mock.recorder = &MockIEvaluationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEvaluation) EXPECT() *MockIEvaluationMockRecorder {
	return m.recorder
}

// AddHandler mocks base method.
func (m *MockIEvaluation) AddHandler(eventType EventType, callback EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHandler", eventType, callback)
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockIEvaluationMockRecorder) AddHandler(eventType, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockIEvaluation)(nil).AddHandler), eventType, callback)
}

// AddHooks mocks base method.
func (m *MockIEvaluation) AddHooks(hooks ...Hook) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range hooks {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddHooks", varargs...)
}

// AddHooks indicates an expected call of AddHooks.
func (mr *MockIEvaluationMockRecorder) AddHooks(hooks ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHooks", reflect.TypeOf((*MockIEvaluation)(nil).AddHooks), hooks...)
}

// GetClient mocks base method.
func (m *MockIEvaluation) GetClient() IClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(IClient)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockIEvaluationMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockIEvaluation)(nil).GetClient))
}

// GetNamedClient mocks base method.
func (m *MockIEvaluation) GetNamedClient(clientName string) IClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamedClient", clientName)
	ret0, _ := ret[0].(IClient)
	return ret0
}

// GetNamedClient indicates an expected call of GetNamedClient.
func (mr *MockIEvaluationMockRecorder) GetNamedClient(clientName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamedClient", reflect.TypeOf((*MockIEvaluation)(nil).GetNamedClient), clientName)
}

// GetNamedProviderMetadata mocks base method.
func (m *MockIEvaluation) GetNamedProviderMetadata(name string) Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamedProviderMetadata", name)
	ret0, _ := ret[0].(Metadata)
	return ret0
}

// GetNamedProviderMetadata indicates an expected call of GetNamedProviderMetadata.
func (mr *MockIEvaluationMockRecorder) GetNamedProviderMetadata(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamedProviderMetadata", reflect.TypeOf((*MockIEvaluation)(nil).GetNamedProviderMetadata), name)
}

// GetProviderMetadata mocks base method.
func (m *MockIEvaluation) GetProviderMetadata() Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderMetadata")
	ret0, _ := ret[0].(Metadata)
	return ret0
}

// GetProviderMetadata indicates an expected call of GetProviderMetadata.
func (mr *MockIEvaluationMockRecorder) GetProviderMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderMetadata", reflect.TypeOf((*MockIEvaluation)(nil).GetProviderMetadata))
}

// RemoveHandler mocks base method.
func (m *MockIEvaluation) RemoveHandler(eventType EventType, callback EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveHandler", eventType, callback)
}

// RemoveHandler indicates an expected call of RemoveHandler.
func (mr *MockIEvaluationMockRecorder) RemoveHandler(eventType, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHandler", reflect.TypeOf((*MockIEvaluation)(nil).RemoveHandler), eventType, callback)
}

// SetEvaluationContext mocks base method.
func (m *MockIEvaluation) SetEvaluationContext(apiCtx EvaluationContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEvaluationContext", apiCtx)
}

// SetEvaluationContext indicates an expected call of SetEvaluationContext.
func (mr *MockIEvaluationMockRecorder) SetEvaluationContext(apiCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEvaluationContext", reflect.TypeOf((*MockIEvaluation)(nil).SetEvaluationContext), apiCtx)
}

// SetNamedProvider mocks base method.
func (m *MockIEvaluation) SetNamedProvider(clientName string, provider FeatureProvider, async bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNamedProvider", clientName, provider, async)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNamedProvider indicates an expected call of SetNamedProvider.
func (mr *MockIEvaluationMockRecorder) SetNamedProvider(clientName, provider, async interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNamedProvider", reflect.TypeOf((*MockIEvaluation)(nil).SetNamedProvider), clientName, provider, async)
}

// SetProvider mocks base method.
func (m *MockIEvaluation) SetProvider(provider FeatureProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProvider", provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProvider indicates an expected call of SetProvider.
func (mr *MockIEvaluationMockRecorder) SetProvider(provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProvider", reflect.TypeOf((*MockIEvaluation)(nil).SetProvider), provider)
}

// SetProviderAndWait mocks base method.
func (m *MockIEvaluation) SetProviderAndWait(provider FeatureProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProviderAndWait", provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProviderAndWait indicates an expected call of SetProviderAndWait.
func (mr *MockIEvaluationMockRecorder) SetProviderAndWait(provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProviderAndWait", reflect.TypeOf((*MockIEvaluation)(nil).SetProviderAndWait), provider)
}

// Shutdown mocks base method.
func (m *MockIEvaluation) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockIEvaluationMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockIEvaluation)(nil).Shutdown))
}

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// AddHandler mocks base method.
func (m *MockIClient) AddHandler(eventType EventType, callback EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHandler", eventType, callback)
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockIClientMockRecorder) AddHandler(eventType, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockIClient)(nil).AddHandler), eventType, callback)
}

// AddHooks mocks base method.
func (m *MockIClient) AddHooks(hooks ...Hook) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range hooks {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddHooks", varargs...)
}

// AddHooks indicates an expected call of AddHooks.
func (mr *MockIClientMockRecorder) AddHooks(hooks ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHooks", reflect.TypeOf((*MockIClient)(nil).AddHooks), hooks...)
}

// Boolean mocks base method.
func (m *MockIClient) Boolean(ctx context.Context, flag string, defaultValue bool, evalCtx EvaluationContext, options ...Option) bool {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Boolean", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Boolean indicates an expected call of Boolean.
func (mr *MockIClientMockRecorder) Boolean(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Boolean", reflect.TypeOf((*MockIClient)(nil).Boolean), varargs...)
}

// BooleanValue mocks base method.
func (m *MockIClient) BooleanValue(ctx context.Context, flag string, defaultValue bool, evalCtx EvaluationContext, options ...Option) (bool, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BooleanValue", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BooleanValue indicates an expected call of BooleanValue.
func (mr *MockIClientMockRecorder) BooleanValue(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BooleanValue", reflect.TypeOf((*MockIClient)(nil).BooleanValue), varargs...)
}

// BooleanValueDetails mocks base method.
func (m *MockIClient) BooleanValueDetails(ctx context.Context, flag string, defaultValue bool, evalCtx EvaluationContext, options ...Option) (BooleanEvaluationDetails, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BooleanValueDetails", varargs...)
	ret0, _ := ret[0].(BooleanEvaluationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BooleanValueDetails indicates an expected call of BooleanValueDetails.
func (mr *MockIClientMockRecorder) BooleanValueDetails(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BooleanValueDetails", reflect.TypeOf((*MockIClient)(nil).BooleanValueDetails), varargs...)
}

// EvaluationContext mocks base method.
func (m *MockIClient) EvaluationContext() EvaluationContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvaluationContext")
	ret0, _ := ret[0].(EvaluationContext)
	return ret0
}

// EvaluationContext indicates an expected call of EvaluationContext.
func (mr *MockIClientMockRecorder) EvaluationContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvaluationContext", reflect.TypeOf((*MockIClient)(nil).EvaluationContext))
}

// Float mocks base method.
func (m *MockIClient) Float(ctx context.Context, flag string, defaultValue float64, evalCtx EvaluationContext, options ...Option) float64 {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Float", varargs...)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Float indicates an expected call of Float.
func (mr *MockIClientMockRecorder) Float(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Float", reflect.TypeOf((*MockIClient)(nil).Float), varargs...)
}

// FloatValue mocks base method.
func (m *MockIClient) FloatValue(ctx context.Context, flag string, defaultValue float64, evalCtx EvaluationContext, options ...Option) (float64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FloatValue", varargs...)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FloatValue indicates an expected call of FloatValue.
func (mr *MockIClientMockRecorder) FloatValue(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloatValue", reflect.TypeOf((*MockIClient)(nil).FloatValue), varargs...)
}

// FloatValueDetails mocks base method.
func (m *MockIClient) FloatValueDetails(ctx context.Context, flag string, defaultValue float64, evalCtx EvaluationContext, options ...Option) (FloatEvaluationDetails, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FloatValueDetails", varargs...)
	ret0, _ := ret[0].(FloatEvaluationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FloatValueDetails indicates an expected call of FloatValueDetails.
func (mr *MockIClientMockRecorder) FloatValueDetails(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FloatValueDetails", reflect.TypeOf((*MockIClient)(nil).FloatValueDetails), varargs...)
}

// Int mocks base method.
func (m *MockIClient) Int(ctx context.Context, flag string, defaultValue int64, evalCtx EvaluationContext, options ...Option) int64 {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Int", varargs...)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Int indicates an expected call of Int.
func (mr *MockIClientMockRecorder) Int(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Int", reflect.TypeOf((*MockIClient)(nil).Int), varargs...)
}

// IntValue mocks base method.
func (m *MockIClient) IntValue(ctx context.Context, flag string, defaultValue int64, evalCtx EvaluationContext, options ...Option) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IntValue", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntValue indicates an expected call of IntValue.
func (mr *MockIClientMockRecorder) IntValue(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntValue", reflect.TypeOf((*MockIClient)(nil).IntValue), varargs...)
}

// IntValueDetails mocks base method.
func (m *MockIClient) IntValueDetails(ctx context.Context, flag string, defaultValue int64, evalCtx EvaluationContext, options ...Option) (IntEvaluationDetails, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IntValueDetails", varargs...)
	ret0, _ := ret[0].(IntEvaluationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntValueDetails indicates an expected call of IntValueDetails.
func (mr *MockIClientMockRecorder) IntValueDetails(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntValueDetails", reflect.TypeOf((*MockIClient)(nil).IntValueDetails), varargs...)
}

// Metadata mocks base method.
func (m *MockIClient) Metadata() ClientMetadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata")
	ret0, _ := ret[0].(ClientMetadata)
	return ret0
}

// Metadata indicates an expected call of Metadata.
func (mr *MockIClientMockRecorder) Metadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockIClient)(nil).Metadata))
}

// Object mocks base method.
func (m *MockIClient) Object(ctx context.Context, flag string, defaultValue interface{}, evalCtx EvaluationContext, options ...Option) interface{} {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Object", varargs...)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Object indicates an expected call of Object.
func (mr *MockIClientMockRecorder) Object(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Object", reflect.TypeOf((*MockIClient)(nil).Object), varargs...)
}

// ObjectValue mocks base method.
func (m *MockIClient) ObjectValue(ctx context.Context, flag string, defaultValue interface{}, evalCtx EvaluationContext, options ...Option) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObjectValue", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectValue indicates an expected call of ObjectValue.
func (mr *MockIClientMockRecorder) ObjectValue(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectValue", reflect.TypeOf((*MockIClient)(nil).ObjectValue), varargs...)
}

// ObjectValueDetails mocks base method.
func (m *MockIClient) ObjectValueDetails(ctx context.Context, flag string, defaultValue interface{}, evalCtx EvaluationContext, options ...Option) (InterfaceEvaluationDetails, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ObjectValueDetails", varargs...)
	ret0, _ := ret[0].(InterfaceEvaluationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectValueDetails indicates an expected call of ObjectValueDetails.
func (mr *MockIClientMockRecorder) ObjectValueDetails(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectValueDetails", reflect.TypeOf((*MockIClient)(nil).ObjectValueDetails), varargs...)
}

// RemoveHandler mocks base method.
func (m *MockIClient) RemoveHandler(eventType EventType, callback EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveHandler", eventType, callback)
}

// RemoveHandler indicates an expected call of RemoveHandler.
func (mr *MockIClientMockRecorder) RemoveHandler(eventType, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHandler", reflect.TypeOf((*MockIClient)(nil).RemoveHandler), eventType, callback)
}

// SetEvaluationContext mocks base method.
func (m *MockIClient) SetEvaluationContext(evalCtx EvaluationContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEvaluationContext", evalCtx)
}

// SetEvaluationContext indicates an expected call of SetEvaluationContext.
func (mr *MockIClientMockRecorder) SetEvaluationContext(evalCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEvaluationContext", reflect.TypeOf((*MockIClient)(nil).SetEvaluationContext), evalCtx)
}

// State mocks base method.
func (m *MockIClient) State() State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State")
	ret0, _ := ret[0].(State)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockIClientMockRecorder) State() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockIClient)(nil).State))
}

// String mocks base method.
func (m *MockIClient) String(ctx context.Context, flag, defaultValue string, evalCtx EvaluationContext, options ...Option) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "String", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockIClientMockRecorder) String(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockIClient)(nil).String), varargs...)
}

// StringValue mocks base method.
func (m *MockIClient) StringValue(ctx context.Context, flag, defaultValue string, evalCtx EvaluationContext, options ...Option) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StringValue", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StringValue indicates an expected call of StringValue.
func (mr *MockIClientMockRecorder) StringValue(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringValue", reflect.TypeOf((*MockIClient)(nil).StringValue), varargs...)
}

// StringValueDetails mocks base method.
func (m *MockIClient) StringValueDetails(ctx context.Context, flag, defaultValue string, evalCtx EvaluationContext, options ...Option) (StringEvaluationDetails, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, flag, defaultValue, evalCtx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StringValueDetails", varargs...)
	ret0, _ := ret[0].(StringEvaluationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StringValueDetails indicates an expected call of StringValueDetails.
func (mr *MockIClientMockRecorder) StringValueDetails(ctx, flag, defaultValue, evalCtx interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, flag, defaultValue, evalCtx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringValueDetails", reflect.TypeOf((*MockIClient)(nil).StringValueDetails), varargs...)
}

// Track mocks base method.
func (m *MockIClient) Track(ctx context.Context, trackingEventName string, evalCtx EvaluationContext, details TrackingEventDetails) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Track", ctx, trackingEventName, evalCtx, details)
}

// Track indicates an expected call of Track.
func (mr *MockIClientMockRecorder) Track(ctx, trackingEventName, evalCtx, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockIClient)(nil).Track), ctx, trackingEventName, evalCtx, details)
}

// MockIEventing is a mock of IEventing interface.
type MockIEventing struct {
	ctrl     *gomock.Controller
	recorder *MockIEventingMockRecorder
}

// MockIEventingMockRecorder is the mock recorder for MockIEventing.
type MockIEventingMockRecorder struct {
	mock *MockIEventing
}

// NewMockIEventing creates a new mock instance.
func NewMockIEventing(ctrl *gomock.Controller) *MockIEventing {
	mock := &MockIEventing{ctrl: ctrl}
	mock.recorder = &MockIEventingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEventing) EXPECT() *MockIEventingMockRecorder {
	return m.recorder
}

// AddHandler mocks base method.
func (m *MockIEventing) AddHandler(eventType EventType, callback EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHandler", eventType, callback)
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockIEventingMockRecorder) AddHandler(eventType, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockIEventing)(nil).AddHandler), eventType, callback)
}

// RemoveHandler mocks base method.
func (m *MockIEventing) RemoveHandler(eventType EventType, callback EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveHandler", eventType, callback)
}

// RemoveHandler indicates an expected call of RemoveHandler.
func (mr *MockIEventingMockRecorder) RemoveHandler(eventType, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHandler", reflect.TypeOf((*MockIEventing)(nil).RemoveHandler), eventType, callback)
}

// MockITracking is a mock of ITracking interface.
type MockITracking struct {
	ctrl     *gomock.Controller
	recorder *MockITrackingMockRecorder
}

// MockITrackingMockRecorder is the mock recorder for MockITracking.
type MockITrackingMockRecorder struct {
	mock *MockITracking
}

// NewMockITracking creates a new mock instance.
func NewMockITracking(ctrl *gomock.Controller) *MockITracking {
	mock := &MockITracking{ctrl: ctrl}
	mock.recorder = &MockITrackingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITracking) EXPECT() *MockITrackingMockRecorder {
	return m.recorder
}

// Track mocks base method.
func (m *MockITracking) Track(ctx context.Context, trackingEventName string, evalCtx EvaluationContext, details TrackingEventDetails) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Track", ctx, trackingEventName, evalCtx, details)
}

// Track indicates an expected call of Track.
func (mr *MockITrackingMockRecorder) Track(ctx, trackingEventName, evalCtx, details interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockITracking)(nil).Track), ctx, trackingEventName, evalCtx, details)
}

// MockevaluationImpl is a mock of evaluationImpl interface.
type MockevaluationImpl struct {
	ctrl     *gomock.Controller
	recorder *MockevaluationImplMockRecorder
}

// MockevaluationImplMockRecorder is the mock recorder for MockevaluationImpl.
type MockevaluationImplMockRecorder struct {
	mock *MockevaluationImpl
}

// NewMockevaluationImpl creates a new mock instance.
func NewMockevaluationImpl(ctrl *gomock.Controller) *MockevaluationImpl {
	mock := &MockevaluationImpl{ctrl: ctrl}
	mock.recorder = &MockevaluationImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockevaluationImpl) EXPECT() *MockevaluationImplMockRecorder {
	return m.recorder
}

// AddHandler mocks base method.
func (m *MockevaluationImpl) AddHandler(eventType EventType, callback EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHandler", eventType, callback)
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockevaluationImplMockRecorder) AddHandler(eventType, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockevaluationImpl)(nil).AddHandler), eventType, callback)
}

// AddHooks mocks base method.
func (m *MockevaluationImpl) AddHooks(hooks ...Hook) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range hooks {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AddHooks", varargs...)
}

// AddHooks indicates an expected call of AddHooks.
func (mr *MockevaluationImplMockRecorder) AddHooks(hooks ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHooks", reflect.TypeOf((*MockevaluationImpl)(nil).AddHooks), hooks...)
}

// ForEvaluation mocks base method.
func (m *MockevaluationImpl) ForEvaluation(clientName string) (FeatureProvider, []Hook, EvaluationContext) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForEvaluation", clientName)
	ret0, _ := ret[0].(FeatureProvider)
	ret1, _ := ret[1].([]Hook)
	ret2, _ := ret[2].(EvaluationContext)
	return ret0, ret1, ret2
}

// ForEvaluation indicates an expected call of ForEvaluation.
func (mr *MockevaluationImplMockRecorder) ForEvaluation(clientName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEvaluation", reflect.TypeOf((*MockevaluationImpl)(nil).ForEvaluation), clientName)
}

// GetClient mocks base method.
func (m *MockevaluationImpl) GetClient() IClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(IClient)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockevaluationImplMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockevaluationImpl)(nil).GetClient))
}

// GetHooks mocks base method.
func (m *MockevaluationImpl) GetHooks() []Hook {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHooks")
	ret0, _ := ret[0].([]Hook)
	return ret0
}

// GetHooks indicates an expected call of GetHooks.
func (mr *MockevaluationImplMockRecorder) GetHooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHooks", reflect.TypeOf((*MockevaluationImpl)(nil).GetHooks))
}

// GetNamedClient mocks base method.
func (m *MockevaluationImpl) GetNamedClient(clientName string) IClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamedClient", clientName)
	ret0, _ := ret[0].(IClient)
	return ret0
}

// GetNamedClient indicates an expected call of GetNamedClient.
func (mr *MockevaluationImplMockRecorder) GetNamedClient(clientName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamedClient", reflect.TypeOf((*MockevaluationImpl)(nil).GetNamedClient), clientName)
}

// GetNamedProviderMetadata mocks base method.
func (m *MockevaluationImpl) GetNamedProviderMetadata(name string) Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamedProviderMetadata", name)
	ret0, _ := ret[0].(Metadata)
	return ret0
}

// GetNamedProviderMetadata indicates an expected call of GetNamedProviderMetadata.
func (mr *MockevaluationImplMockRecorder) GetNamedProviderMetadata(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamedProviderMetadata", reflect.TypeOf((*MockevaluationImpl)(nil).GetNamedProviderMetadata), name)
}

// GetNamedProviders mocks base method.
func (m *MockevaluationImpl) GetNamedProviders() map[string]FeatureProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamedProviders")
	ret0, _ := ret[0].(map[string]FeatureProvider)
	return ret0
}

// GetNamedProviders indicates an expected call of GetNamedProviders.
func (mr *MockevaluationImplMockRecorder) GetNamedProviders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamedProviders", reflect.TypeOf((*MockevaluationImpl)(nil).GetNamedProviders))
}

// GetProvider mocks base method.
func (m *MockevaluationImpl) GetProvider() FeatureProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvider")
	ret0, _ := ret[0].(FeatureProvider)
	return ret0
}

// GetProvider indicates an expected call of GetProvider.
func (mr *MockevaluationImplMockRecorder) GetProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvider", reflect.TypeOf((*MockevaluationImpl)(nil).GetProvider))
}

// GetProviderMetadata mocks base method.
func (m *MockevaluationImpl) GetProviderMetadata() Metadata {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderMetadata")
	ret0, _ := ret[0].(Metadata)
	return ret0
}

// GetProviderMetadata indicates an expected call of GetProviderMetadata.
func (mr *MockevaluationImplMockRecorder) GetProviderMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderMetadata", reflect.TypeOf((*MockevaluationImpl)(nil).GetProviderMetadata))
}

// RemoveHandler mocks base method.
func (m *MockevaluationImpl) RemoveHandler(eventType EventType, callback EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveHandler", eventType, callback)
}

// RemoveHandler indicates an expected call of RemoveHandler.
func (mr *MockevaluationImplMockRecorder) RemoveHandler(eventType, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHandler", reflect.TypeOf((*MockevaluationImpl)(nil).RemoveHandler), eventType, callback)
}

// SetEvaluationContext mocks base method.
func (m *MockevaluationImpl) SetEvaluationContext(apiCtx EvaluationContext) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetEvaluationContext", apiCtx)
}

// SetEvaluationContext indicates an expected call of SetEvaluationContext.
func (mr *MockevaluationImplMockRecorder) SetEvaluationContext(apiCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEvaluationContext", reflect.TypeOf((*MockevaluationImpl)(nil).SetEvaluationContext), apiCtx)
}

// SetLogger mocks base method.
func (m *MockevaluationImpl) SetLogger(l logr.Logger) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLogger", l)
}

// SetLogger indicates an expected call of SetLogger.
func (mr *MockevaluationImplMockRecorder) SetLogger(l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLogger", reflect.TypeOf((*MockevaluationImpl)(nil).SetLogger), l)
}

// SetNamedProvider mocks base method.
func (m *MockevaluationImpl) SetNamedProvider(clientName string, provider FeatureProvider, async bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNamedProvider", clientName, provider, async)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetNamedProvider indicates an expected call of SetNamedProvider.
func (mr *MockevaluationImplMockRecorder) SetNamedProvider(clientName, provider, async interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNamedProvider", reflect.TypeOf((*MockevaluationImpl)(nil).SetNamedProvider), clientName, provider, async)
}

// SetProvider mocks base method.
func (m *MockevaluationImpl) SetProvider(provider FeatureProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProvider", provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProvider indicates an expected call of SetProvider.
func (mr *MockevaluationImplMockRecorder) SetProvider(provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProvider", reflect.TypeOf((*MockevaluationImpl)(nil).SetProvider), provider)
}

// SetProviderAndWait mocks base method.
func (m *MockevaluationImpl) SetProviderAndWait(provider FeatureProvider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProviderAndWait", provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetProviderAndWait indicates an expected call of SetProviderAndWait.
func (mr *MockevaluationImplMockRecorder) SetProviderAndWait(provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProviderAndWait", reflect.TypeOf((*MockevaluationImpl)(nil).SetProviderAndWait), provider)
}

// Shutdown mocks base method.
func (m *MockevaluationImpl) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockevaluationImplMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockevaluationImpl)(nil).Shutdown))
}

// MockeventingImpl is a mock of eventingImpl interface.
type MockeventingImpl struct {
	ctrl     *gomock.Controller
	recorder *MockeventingImplMockRecorder
}

// MockeventingImplMockRecorder is the mock recorder for MockeventingImpl.
type MockeventingImplMockRecorder struct {
	mock *MockeventingImpl
}

// NewMockeventingImpl creates a new mock instance.
func NewMockeventingImpl(ctrl *gomock.Controller) *MockeventingImpl {
	mock := &MockeventingImpl{ctrl: ctrl}
	mock.recorder = &MockeventingImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockeventingImpl) EXPECT() *MockeventingImplMockRecorder {
	return m.recorder
}

// AddClientHandler mocks base method.
func (m *MockeventingImpl) AddClientHandler(clientName string, t EventType, c EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddClientHandler", clientName, t, c)
}

// AddClientHandler indicates an expected call of AddClientHandler.
func (mr *MockeventingImplMockRecorder) AddClientHandler(clientName, t, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientHandler", reflect.TypeOf((*MockeventingImpl)(nil).AddClientHandler), clientName, t, c)
}

// AddHandler mocks base method.
func (m *MockeventingImpl) AddHandler(eventType EventType, callback EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddHandler", eventType, callback)
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockeventingImplMockRecorder) AddHandler(eventType, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockeventingImpl)(nil).AddHandler), eventType, callback)
}

// GetAPIRegistry mocks base method.
func (m *MockeventingImpl) GetAPIRegistry() map[EventType][]EventCallback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIRegistry")
	ret0, _ := ret[0].(map[EventType][]EventCallback)
	return ret0
}

// GetAPIRegistry indicates an expected call of GetAPIRegistry.
func (mr *MockeventingImplMockRecorder) GetAPIRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIRegistry", reflect.TypeOf((*MockeventingImpl)(nil).GetAPIRegistry))
}

// GetClientRegistry mocks base method.
func (m *MockeventingImpl) GetClientRegistry(client string) scopedCallback {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientRegistry", client)
	ret0, _ := ret[0].(scopedCallback)
	return ret0
}

// GetClientRegistry indicates an expected call of GetClientRegistry.
func (mr *MockeventingImplMockRecorder) GetClientRegistry(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientRegistry", reflect.TypeOf((*MockeventingImpl)(nil).GetClientRegistry), client)
}

// RemoveClientHandler mocks base method.
func (m *MockeventingImpl) RemoveClientHandler(name string, t EventType, c EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveClientHandler", name, t, c)
}

// RemoveClientHandler indicates an expected call of RemoveClientHandler.
func (mr *MockeventingImplMockRecorder) RemoveClientHandler(name, t, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClientHandler", reflect.TypeOf((*MockeventingImpl)(nil).RemoveClientHandler), name, t, c)
}

// RemoveHandler mocks base method.
func (m *MockeventingImpl) RemoveHandler(eventType EventType, callback EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveHandler", eventType, callback)
}

// RemoveHandler indicates an expected call of RemoveHandler.
func (mr *MockeventingImplMockRecorder) RemoveHandler(eventType, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHandler", reflect.TypeOf((*MockeventingImpl)(nil).RemoveHandler), eventType, callback)
}

// State mocks base method.
func (m *MockeventingImpl) State(domain string) State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State", domain)
	ret0, _ := ret[0].(State)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockeventingImplMockRecorder) State(domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockeventingImpl)(nil).State), domain)
}

// MockclientEvent is a mock of clientEvent interface.
type MockclientEvent struct {
	ctrl     *gomock.Controller
	recorder *MockclientEventMockRecorder
}

// MockclientEventMockRecorder is the mock recorder for MockclientEvent.
type MockclientEventMockRecorder struct {
	mock *MockclientEvent
}

// NewMockclientEvent creates a new mock instance.
func NewMockclientEvent(ctrl *gomock.Controller) *MockclientEvent {
	mock := &MockclientEvent{ctrl: ctrl}
	mock.recorder = &MockclientEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockclientEvent) EXPECT() *MockclientEventMockRecorder {
	return m.recorder
}

// AddClientHandler mocks base method.
func (m *MockclientEvent) AddClientHandler(clientName string, t EventType, c EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddClientHandler", clientName, t, c)
}

// AddClientHandler indicates an expected call of AddClientHandler.
func (mr *MockclientEventMockRecorder) AddClientHandler(clientName, t, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddClientHandler", reflect.TypeOf((*MockclientEvent)(nil).AddClientHandler), clientName, t, c)
}

// RemoveClientHandler mocks base method.
func (m *MockclientEvent) RemoveClientHandler(name string, t EventType, c EventCallback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveClientHandler", name, t, c)
}

// RemoveClientHandler indicates an expected call of RemoveClientHandler.
func (mr *MockclientEventMockRecorder) RemoveClientHandler(name, t, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveClientHandler", reflect.TypeOf((*MockclientEvent)(nil).RemoveClientHandler), name, t, c)
}

// State mocks base method.
func (m *MockclientEvent) State(domain string) State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "State", domain)
	ret0, _ := ret[0].(State)
	return ret0
}

// State indicates an expected call of State.
func (mr *MockclientEventMockRecorder) State(domain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "State", reflect.TypeOf((*MockclientEvent)(nil).State), domain)
}
